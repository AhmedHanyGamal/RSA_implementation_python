from prime_number_generator import generateLargePrime
from extended_euclidean_algorithm import extended_euclidean_algorithm
from supplementary_functions import fast_power
from hashlib import sha3_512
import random


class PublicKey:
    def __init__(self, e: int, N: int) -> None:
        self.e = e
        self.N = N

    def encrypt_message(self, message: str) -> int:
        """
        used for privacy and sending messages in a secure way. Can only be decrypted using the corresponding private key.
        """
        return fast_power(int(message.encode('utf-8').hex(), 16), self.e, self.N)


    # def decrypt_message(self, encrypted_message):
    #     """
    #     used for authentication purposes. Digital signatures and stuff.
    #     use it authenticate digital signatures and stuff.
    #     """
    #     return fast_power(encrypted_message, self.e, self.N)
    

    def authenticate_message(self, message: str, signature):
        """
        used for authentication purposes. Digital signatures and stuff.
        use it authenticate digital signatures and stuff.
        """
        message = message.encode()
        message_digest = sha3_512(message)
        decrypted_signature = fast_power(signature, self.e, self.N)

        if int(message_digest.hexdigest(), 16) == decrypted_signature:
            return True
        else:
            return False

        # return 


class PrivateKey:
    def __init__(self, d: int, N: int, phi_N: int) -> None:
        self.d = d
        self.N = N
        self.phi_N = phi_N

    def generate_public_key(self):
        return PublicKey(extended_euclidean_algorithm(self.d, self.phi_N), self.N)
    
    # def encrypt_message(self, message: str):
    def sign_message(self, message: str):
        """
        used for authentication purposes. Digital signatures and stuff.
        use it for signing stuff.
        """
        message = message.encode()
        message_digest = sha3_512(message)
        # print(f"message digest = {int(message_digest.hexdigest(), 16)}")
        return fast_power(int(message_digest.hexdigest(), 16), self.d, self.N)

    #will probably remove this
    def decrypt_message(self, encrypted_message):
        """
        decrypts messages that were encrypted by the corresponding public key.
        used for privacy and sending messages in a secure way. 
        """
        return bytes.fromhex(hex(fast_power(encrypted_message, self.d, self.N)).lstrip("0x")).decode('utf-8')


def generate_key_pair(prime_number_bits):
    p = generateLargePrime(prime_number_bits)
    q = generateLargePrime(prime_number_bits)
    N = p * q
    phi_N = (p-1) * (q-1)
    e = generateLargePrime(30)
    d = extended_euclidean_algorithm(e, phi_N)
    
    public_key = PublicKey(e, N)
    private_key = PrivateKey(d, N, phi_N)
    return (public_key, private_key)


# public_key = PublicKey(333743209, 10730972836475878717497484820823700168249651570969638342436987343254694919556365413641866293087589301557983283103647457797031028063391225830771281626536432914443843804356832512673171229232437464983524289371848140456648472915743846791150831984780308103299087661413571500526388537399019045833107496320588350135766592566671096070322623424375514988579476642125603097414363807683287534687951569537013608237437977158872363591627076471016037340066530563920461592587282776189410299387753596711508060569528978114159884235398246932924606799323789844967524907393261751088631925516499838540109640533419263110607263474053554332573)
# private_key = PrivateKey
# print(private_key.decrypt_message(3146986984540523911285028478062180963821984612182385142582555041600868865233110827138602109291024071419529550185150610062646715908241399788992470388714383622710746559009999816933909687829381744032898735268481921902710418629755765674923647430133017977481865638391728886393040025125270559505391728382923152094059300136461322244245495970601367632622919156547661160962075288604833904212640679412790687541599632160221923058141016428378834058937593762770330971055824165591591004939111506521354016869068167609926439524547857922168108004911156518968893601169977706782108202504185861935860445701035388994299068175508491399228))


# public_key, private_key = generate_key_pair(1024)
# print(f"public key values:\ne = {public_key.e}\nN = {public_key.N}")
# print(f"private key values:\nd = {private_key.d}\nN = {private_key.N}\nphi_N = {private_key.phi_N}")



# message = input("please enter your secret message ðŸ¤«: ")
# print(public_key.encrypt_message(message))



# print(public_key.encrypt_message(message))

# print(hex(3104839990184891939036329491529856201257818819775270318333310139169166390689773901079919645859579945059197046250751996442824176269638644133742429170308875066057202548912689760023890186782572059039568740211128681985669999134546091145801015411962708039706769892521718275066664323609873549247621066464050796369752139172595391246099110407533179918702883995154136740589869470103205912324981421786516955251561924778826492779079659077864717516212522590116951894841377627111606312271949560546674406411856565050887206306051960570707862196671768529368312673549303328020118405193092139973899277815440805303572182889459214253681))

# print(f"the public key's e = {public_key.e}")
# print(f"the private key's d = {private_key.d}")
# print(f"N = {public_key.N}")
# print(f"private key generating e: {private_key.generate_public_key()}")

# encrypted_message = private_key.encrypt_message(("the message to encrypt").encode())
# print(encrypted_message)
# print(public_key.decrypt_message(encrypted_message))

# message = "I hope this works"
# print(public_key.encrypt_message(message))
# print(private_key.decrypt_message(public_key.encrypt_message(message)))